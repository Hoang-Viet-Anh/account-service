type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/database/password/Password.java
  visible: true
  text: |
    package account.database.password;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;

    @Entity
    @Table(name = "hacked_passwords")
    public class Password {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @JsonProperty("new_password")
        @NotEmpty
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @Column(name = "password", unique = true)
        private String password;

        public Password() {
        }

        public Password(String password) {
            this.password = password;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
  learner_created: true
- name: src/account/security/AuthSuccessListener.java
  visible: true
  text: |
    package account.security;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.context.event.EventListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    import java.util.List;

    @Component
    public class AuthSuccessListener implements ApplicationListener<AuthenticationSuccessEvent> {

        @Autowired
        UserRepository userRepository;

        @Override
        public void onApplicationEvent(AuthenticationSuccessEvent event) {
            String username = event.getAuthentication().getName().toLowerCase();
            User user = userRepository.findByEmailIgnoreCase(username);
            user.setAttempts(0);
            userRepository.save(user);
        }
    }
  learner_created: true
- name: src/account/database/payrolls/Payroll.java
  visible: true
  text: |
    package account.database.payrolls;

    import javax.persistence.*;
    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    @Entity
    @Table(name = "payrolls", uniqueConstraints = {@UniqueConstraint(columnNames = {"employee", "period"})})
    public class Payroll {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @NotEmpty
        @Column(name = "employee")
        private String employee;

        @NotEmpty
        @Column(name = "period")
        @Pattern(regexp = "^(01|02|03|04|05|06|07|08|09|10|11|12)-[0-9]{4}$")
        private String period;

        @NotNull
        @Min(value = 0, message = "The salary must be non-negative.")
        @Column(name = "salary")
        private long salary;

        public Payroll() {
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public long getSalary() {
            return salary;
        }

        public void setSalary(long salary) {
            this.salary = salary;
        }


    }
  learner_created: true
- name: src/account/security/WebSecurityConfigurerImpl.java
  visible: true
  text: |
    package account.security;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.role.Role;
    import com.google.gson.JsonObject;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.http.HttpServletResponse;
    import java.util.Date;

    @EnableWebSecurity
    public class WebSecurityConfigurerImpl extends WebSecurityConfigurerAdapter {
        @Autowired
        UserDetailsServiceImpl userDetailsService;

        @Autowired
        LogRepository logRepository;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userDetailsService)
                    .passwordEncoder(getEncoder());

        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests() // manage access
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment")
                        .hasAnyRole(Role.USER.toString(), Role.ACCOUNTANT.toString())
                    .mvcMatchers("/api/acct/payments").hasRole(Role.ACCOUNTANT.toString())
                    .mvcMatchers("/api/admin/**").hasRole(Role.ADMINISTRATOR.toString())
                    .mvcMatchers(HttpMethod.GET, "/api/security/events").hasRole(Role.AUDITOR.toString())
                    .mvcMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                    .mvcMatchers(HttpMethod.POST, "/actuator/shutdown").permitAll()
                    .anyRequest().authenticated()
                    .and()
                    .httpBasic()
                    .authenticationEntryPoint(authenticationEntryPoint()) // Handle auth error
                    .and()
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(13);
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler() {
            return ((request, response, accessDeniedException) -> {
                String username = SecurityContextHolder.getContext().getAuthentication().getName();
                String path = request.getServletPath();
                logRepository.save(new Log.Builder()
                        .setDate(new Date())
                        .setAction(Actions.ACCESS_DENIED)
                        .setSubject(username)
                        .setObject(path)
                        .setPath(path)
                        .build());

                response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied!");
            });
        }

        @Bean
        public AuthenticationEntryPoint authenticationEntryPoint() {
            return (request, response, authException) -> {
                String message = authException.getMessage();
                response.setContentType("application/json;charset=UTF-8");
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                JsonObject jsonObject = new JsonObject();
                jsonObject.addProperty("timestamp", new Date().toString());
                jsonObject.addProperty("status", response.getStatus());
                jsonObject.addProperty("error", HttpStatus.UNAUTHORIZED.getReasonPhrase());
                jsonObject.addProperty("message", message);
                jsonObject.addProperty("path", request.getServletPath());
                response.getWriter().write(jsonObject.toString());
            };
        }
    }
  learner_created: true
- name: src/account/database/user/UserRepository.java
  visible: true
  text: |
    package account.database.user;

    import org.springframework.data.repository.CrudRepository;

    import javax.transaction.Transactional;
    import java.util.List;

    public interface UserRepository extends CrudRepository<User, Long> {
        User findByEmailIgnoreCase(String email);

        @Transactional
        void deleteByEmail(String email);

        boolean existsByEmailIgnoreCase(String email);
    }
  learner_created: true
- name: src/account/database/password/PasswordRepository.java
  visible: true
  text: |
    package account.database.password;


    import org.springframework.data.repository.CrudRepository;

    public interface PasswordRepository extends CrudRepository<Password, Long> {
        boolean existsByPassword(String password);
    }
  learner_created: true
- name: src/account/database/user/role/ChangeRole.java
  visible: true
  text: |
    package account.database.user.role;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Pattern;

    public class ChangeRole {
        @NotEmpty
        private String user;

        @NotEmpty
        @Pattern(regexp = "ANONYMOUS|USER|ACCOUNTANT|ADMINISTRATOR|AUDITOR", message = "Role not found!")
        private String role;

        @NotEmpty
        @Pattern(regexp = "GRANT|REMOVE", message = "Invalid operation!")
        private String operation;

        private Opration oprationType;

        private Role roleType;

        public ChangeRole() {
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public Opration getOprationType() {
            return oprationType;
        }

        public void setOprationType(Opration oprationType) {
            this.oprationType = oprationType;
        }

        public Role getRoleType() {
            return roleType;
        }

        public void setRoleType(Role roleType) {
            this.roleType = roleType;
        }
    }
  learner_created: true
- name: src/account/database/user/role/ListToStringConverter.java
  visible: true
  text: |-
    package account.database.user.role;

    import javax.persistence.AttributeConverter;
    import javax.persistence.Converter;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;

    @Converter
    public class ListToStringConverter implements AttributeConverter<List<Role>, String> {
        @Override
        public String convertToDatabaseColumn(List<Role> attribute) {
            return attribute == null ?
                    null : attribute.stream().map(Enum::toString).collect(Collectors.joining(","));
        }

        @Override
        public List<Role> convertToEntityAttribute(String dbData) {
            return dbData == null ? Collections.emptyList() :
                    Arrays.stream(dbData.split(","))
                            .map(Role::valueOf)
                            .collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/account/database/user/User.java
  visible: true
  text: |
    package account.database.user;

    import account.database.user.role.ListToStringConverter;
    import account.database.user.role.Role;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Comparator;
    import java.util.List;

    @Entity
    @Table(name = "user")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @NotEmpty
        @Column(name = "name", nullable = false)
        private String name;

        @NotEmpty
        @Column(name = "lastname", nullable = false)
        private String lastname;

        @NotEmpty
        @Email
        @Pattern(regexp = ".+@acme.com$", message = "Email should ends with @acme.com")
        @Column(name = "email", nullable = false)
        private String email;

        @NotEmpty
        @Size(min = 12, message = "The password length must be at least 12 chars!")
        @Column(name = "password", nullable = false)
        private String password;

        @Convert(converter = ListToStringConverter.class)
        @Column(name = "role", nullable = false)
        private List<Role> roles = List.of(Role.USER);

        @Column(name = "access", nullable = false)
        private boolean access = true;

        @Column(name = "login_attempts")
        private int attempts = 0;

        public User() {
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRoles() {
            return roles;
        }

        public void setRoles(List<Role> roles) {
            this.roles = roles;
        }

        public boolean isAccess() {
            return access;
        }

        public void setAccess(boolean access) {
            this.access = access;
        }

        public int getAttempts() {
            return attempts;
        }

        public User setAttempts(int attempts) {
            this.attempts = attempts;
            return this;
        }

        public void increaseAttempt() {
            attempts++;
        }

        public void decreaseAttempts() {
            attempts--;
        }

        public String toJson() {
            Gson gson = new GsonBuilder()
                    .setPrettyPrinting()
                    .create();
            JsonObject object = new JsonObject();
            object.addProperty("id", id);
            object.addProperty("name", name);
            object.addProperty("lastname", lastname);
            object.addProperty("email", email);
            JsonArray list = new JsonArray();
            List<Role> roleList = new ArrayList<>(roles);
            roleList.sort(Comparator.comparing(Enum::toString));
            roleList.forEach(a -> list.add("ROLE_" + a.toString()));
            object.add("roles", list);
            return gson.toJson(object);
        }

        public JsonObject toJsonObject() {
            JsonObject object = new JsonObject();
            object.addProperty("id", id);
            object.addProperty("name", name);
            object.addProperty("lastname", lastname);
            object.addProperty("email", email);
            JsonArray list = new JsonArray();
            List<Role> roleList = new ArrayList<>(roles);
            roleList.sort(Comparator.comparing(Enum::toString));
            roleList.forEach(a -> list.add("ROLE_" + a.toString()));
            object.add("roles", list);
            return object;
        }
    }
  learner_created: true
- name: src/account/security/AuthFailureListener.java
  visible: true
  text: |-
    package account.security;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import account.database.user.role.Role;
    import com.google.gson.JsonObject;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.stereotype.Component;
    import org.springframework.web.context.request.WebRequest;

    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.util.Date;
    import java.util.List;

    @Component
    public class AuthFailureListener implements ApplicationListener<AuthenticationFailureBadCredentialsEvent> {
        @Autowired
        LogRepository logRepository;

        @Autowired
        UserRepository userRepository;

        @Autowired
        WebRequest request;

        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent event) {
            String username = event.getAuthentication().getName();
            String path = request.getDescription(false).substring(4);
            logRepository.save(new Log.Builder()
                    .setDate(new Date())
                    .setAction(Actions.LOGIN_FAILED)
                    .setSubject(username)
                    .setObject(path)
                    .setPath(path)
                    .build());
            username = username.contains("anonymous") ? "Anonymous" : username;
            if (userRepository.existsByEmailIgnoreCase(username.toLowerCase())
            && !userRepository.findByEmailIgnoreCase(username).getRoles().contains(Role.ADMINISTRATOR)) {
                User user = userRepository.findByEmailIgnoreCase(username);
                user.increaseAttempt();
                if (user.getAttempts() == 5) {
                    logRepository.save(new Log.Builder()
                            .setDate(new Date())
                            .setAction(Actions.BRUTE_FORCE)
                            .setSubject(username)
                            .setObject(path)
                            .setPath(path)
                            .build());

                    user.setAccess(false);
                    logRepository.save(new Log.Builder()
                            .setDate(new Date())
                            .setAction(Actions.LOCK_USER)
                            .setSubject(username)
                            .setObject(String.format("Lock user %s", username))
                            .setPath(path)
                            .build());
                }
                userRepository.save(user);
            }
        }
    }
  learner_created: true
- name: src/account/database/log/Actions.java
  visible: true
  text: |
    package account.database.log;

    public enum Actions {
        CREATE_USER, CHANGE_PASSWORD, ACCESS_DENIED,
        LOGIN_FAILED, GRANT_ROLE, REMOVE_ROLE, LOCK_USER,
        UNLOCK_USER, DELETE_USER, BRUTE_FORCE;
    }
  learner_created: true
- name: src/account/database/user/role/Opration.java
  visible: true
  text: |
    package account.database.user.role;

    public enum Opration {
        GRANT(1), REMOVE(0);

        private int type;

        Opration(int type) {
            this.type = type;
        }

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }
    }
  learner_created: true
- name: src/account/database/payrolls/PayrollRepository.java
  visible: true
  text: |
    package account.database.payrolls;

    import org.springframework.data.repository.CrudRepository;

    import javax.transaction.Transactional;
    import java.util.List;

    public interface PayrollRepository extends CrudRepository<Payroll, Long> {
        boolean existsByEmployee(String email);

        List<Payroll> findByEmployeeAndPeriod(String email, String period);
        List<Payroll> findByEmployee(String email);
        List<Payroll> findByEmployeeOrderByPeriodDesc(String email);
    }
  learner_created: true
- name: src/account/controllers/AdministrationController.java
  visible: true
  text: |
    package account.controllers;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.access.ActionType;
    import account.database.user.access.UserAccess;
    import account.database.user.role.ChangeRole;
    import account.database.user.role.Opration;
    import account.database.user.role.Role;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import com.google.gson.Gson;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.Errors;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Date;
    import java.util.List;
    import java.util.Locale;

    @RestController
    public class AdministrationController {
        @Autowired
        private UserRepository userRepository;

        @Autowired
        private LogRepository logRepository;

        @Autowired
        private Gson gson;

        @PutMapping("/api/admin/user/role")
        ResponseEntity<String> setUserRole(Authentication auth, @Valid @RequestBody ChangeRole changes, Errors errors) {
            if (errors.hasErrors()) {
                if (errors.getFieldError().getDefaultMessage().contains("Role")) {
                    throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                            errors.getFieldError().getDefaultMessage());
                }

                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());

            }
            changes.setOprationType(Opration.valueOf(changes.getOperation()));
            changes.setRoleType(Role.valueOf(changes.getRole()));
            User user = userRepository.findByEmailIgnoreCase(changes.getUser());

            if (!userRepository.existsByEmailIgnoreCase(changes.getUser())) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");

            } else if (changes.getRoleType().equals(Role.ADMINISTRATOR) &&
                    changes.getOprationType().equals(Opration.REMOVE)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");

            } else if (!user.getRoles()
                .contains(changes.getRoleType()) && changes.getOprationType().equals(Opration.REMOVE)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");

            } else if (changes.getOprationType().equals(Opration.REMOVE) && user.getRoles().size() == 1) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");

            } else if (!user.getRoles()
                    .stream()
                    .allMatch(a -> a.getGroup() == changes.getRoleType().getGroup())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "The user cannot combine administrative and business roles!");

            } else {
                List<Role> roleList = user.getRoles();
                if (changes.getOprationType().equals(Opration.GRANT)) {
                    roleList.add(changes.getRoleType());
                } else {
                    roleList.remove(changes.getRoleType());
                }
                user.setRoles(roleList);
                user = userRepository.save(user);
                String operationObject = changes.getOperation()
                        .charAt(0) +
                        changes.getOperation()
                                .substring(1)
                                .toLowerCase();
                logRepository.save(new Log.Builder()
                        .setDate(new Date())
                        .setAction(Actions.valueOf(changes.getOperation().toString() + "_ROLE"))
                        .setSubject(auth.getName())
                        .setObject(String.format("%s role %s %s %s",
                                operationObject, changes.getRole(),
                                changes.getOprationType().equals(Opration.REMOVE) ? "from" : "to",
                                changes.getUser().toLowerCase()))
                        .setPath("/api/admin/user/role")
                        .build());
                return new ResponseEntity<>(user.toJson(), HttpStatus.OK);
            }
        }

        @GetMapping("/api/admin/user")
        ResponseEntity<String> getUsers() {
            JsonArray array = new JsonArray();
            Iterable<User> users = userRepository.findAll();
            for (User user:
                 users) {
                array.add(user.toJsonObject());
            }
            return new ResponseEntity<>(gson.toJson(array), HttpStatus.OK);
        }

        @DeleteMapping("/api/admin/user/{email}")
        ResponseEntity<String> deleteUser(Authentication auth, @PathVariable String email)   {
            if (!userRepository.existsByEmailIgnoreCase(email)) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            } else if (userRepository.findByEmailIgnoreCase(email)
                    .getRoles()
                    .contains(Role.ADMINISTRATOR)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            } else {
                userRepository.deleteByEmail(email);
                JsonObject response = new JsonObject();
                response.addProperty("user", email);
                response.addProperty("status", "Deleted successfully!");
                logRepository.save(new Log.Builder()
                        .setDate(new Date())
                        .setAction(Actions.DELETE_USER)
                        .setSubject(auth.getName())
                        .setObject(email.toLowerCase())
                        .setPath("/api/admin/user")
                        .build());
                return new ResponseEntity<>(gson.toJson(response), HttpStatus.OK);
            }
        }

        @PutMapping("/api/admin/user/access")
        ResponseEntity<String> setAccess(Authentication auth, @Valid @RequestBody UserAccess access, Errors errors) {
            if (errors.hasErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());
            } else if (!userRepository.existsByEmailIgnoreCase(access.getUser())) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            } else if (userRepository.findByEmailIgnoreCase(access.getUser())
                    .getRoles().contains(Role.ADMINISTRATOR)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't lock the ADMINISTRATOR!");
            } else {
                access.setActionType(ActionType.valueOf(access.getOperation()));
                User user = userRepository.findByEmailIgnoreCase(access.getUser());
                if (access.getActionType().equals(ActionType.UNLOCK)) {
                    user.setAccess(true);
                } else if (access.getActionType().equals(ActionType.LOCK)) {
                    user.setAccess(false);
                }
                user = userRepository.save(user);
                JsonObject object = new JsonObject();
                object.addProperty("status",
                        String.format("User %s %sed!", access.getUser().toLowerCase(),
                                access.getActionType().toString().toLowerCase()));
                String action = access.getActionType().toString();
                logRepository.save(new Log.Builder()
                        .setDate(new Date())
                        .setAction(Actions.valueOf(access.getActionType().toString() + "_USER"))
                        .setSubject(auth.getName())
                        .setObject(String.format("%s user %s",
                                action.charAt(0) + action.substring(1).toLowerCase(),
                                access.getUser().toLowerCase()))
                        .setPath("/api/admin/user/access")
                        .build());
                return new ResponseEntity<>(gson.toJson(object), HttpStatus.OK);
            }
        }
    }
  learner_created: true
- name: src/account/controllers/BusinessServiceController.java
  visible: true
  text: |
    package account.controllers;

    import account.database.log.LogRepository;
    import account.database.payrolls.Payroll;
    import account.database.payrolls.PayrollRepository;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import com.google.gson.Gson;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.Errors;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.text.DateFormatSymbols;
    import java.util.List;

    @RestController
    public class BusinessServiceController {
        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PayrollRepository payrollRepository;

        @Autowired
        private LogRepository logRepository;

        @Autowired
        private Gson gson;

        @PostMapping("/api/acct/payments")
        ResponseEntity<String> addPayments(@Valid @RequestBody List<Payroll> payrollList, Errors errors) {
            if (errors.hasErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());
            }
            payrollList.forEach(a -> {
                if (!userRepository.existsByEmailIgnoreCase(a.getEmployee())) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Employee doesn't exists.");
                }
            });
            try {
                payrollRepository.saveAll(payrollList);
            } catch (Exception e) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The employee-period pair already exists.");
            }
            JsonObject object = new JsonObject();
            object.addProperty("status", "Added successfully!");
            return new ResponseEntity<>(gson.toJson(object), HttpStatus.OK);
        }

        @PutMapping("/api/acct/payments")
        ResponseEntity<String> updatePayment(@Valid @RequestBody Payroll payroll, Errors errors) {
            if (errors.hasErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());
            } else if (!userRepository.existsByEmailIgnoreCase(payroll.getEmployee())) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee doesn't exists.");
            } else if (!payrollRepository.existsByEmployee(payroll.getEmployee())) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Employee salary doesn't exists.");
            }
            Payroll user = payrollRepository.findByEmployeeAndPeriod(payroll.getEmployee(), payroll.getPeriod()).get(0);
            user.setSalary(payroll.getSalary());
            payrollRepository.save(user);
            JsonObject object = new JsonObject();
            object.addProperty("status", "Updated successfully!");
            return new ResponseEntity<>(gson.toJson(object), HttpStatus.OK);
        }

        @GetMapping("/api/empl/payment")
        ResponseEntity<String> getPaymentsByPeriod(Authentication auth, @RequestParam(required = false) String period) {
            List<Payroll> payrollList;
            if (period != null) {
                if (!period.matches("^(01|02|03|04|05|06|07|08|09|10|11|12)-[0-9]{4}$")) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Period has wrong format.");
                } else {
                    payrollList = payrollRepository.findByEmployeeAndPeriod(auth.getName(), period);
                }
            } else {
                payrollList = payrollRepository.findByEmployeeOrderByPeriodDesc(auth.getName());
            }

            User user = userRepository.findByEmailIgnoreCase(auth.getName());
            JsonArray array = new JsonArray();
            if (payrollList != null) {
                for (Payroll data :
                        payrollList) {
                    int month = Integer.parseInt(data.getPeriod().substring(0, 2));
                    String monthName = new DateFormatSymbols().getMonths()[month - 1]
                            .concat(data.getPeriod().substring(2));
                    String salary = String.format("%d dollar(s) %d cent(s)",
                            data.getSalary() / 100,
                            data.getSalary() % 100);
                    JsonObject object = new JsonObject();
                    object.addProperty("name", user.getName());
                    object.addProperty("lastname", user.getLastname());
                    object.addProperty("period", monthName);
                    object.addProperty("salary", salary);
                    array.add(object);
                }
            }
            if (array.size() == 1) {
                return new ResponseEntity<>(gson.toJson(array.get(0).getAsJsonObject()), HttpStatus.OK);
            }
            return new ResponseEntity<>(gson.toJson(array), HttpStatus.OK);
        }

        @GetMapping("/api/security/events")
        ResponseEntity<String> getLog() {
            JsonArray array = new JsonArray();
            logRepository.findAll().forEach(a -> array.add(a.toJsonObject()));
            return new ResponseEntity<>(gson.toJson(array), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/account/Configuration.java
  visible: true
  text: |
    package account;

    import account.database.password.Password;
    import account.database.password.PasswordRepository;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;

    import java.util.ArrayList;
    import java.util.List;

    @org.springframework.context.annotation.Configuration
    public class Configuration {
        @Autowired
        PasswordRepository passwordRepository;

        @Bean
        public Gson getGson() {
            return new GsonBuilder()
                    .setPrettyPrinting()
                    .create();
        }

        @Bean
        public void addHackedPasswords() {
            List<String> passwords = List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
            List<Password> objects = new ArrayList<>();
            passwords.forEach(a -> objects.add(new Password(a)));
            objects.forEach(a -> {
                try {
                    if (!passwordRepository.existsByPassword(a.getPassword())) {
                        passwordRepository.save(a);
                    }
                } catch (Exception ignore) {}
            });
        }
    }
  learner_created: true
- name: src/account/database/user/access/ActionType.java
  visible: true
  text: |
    package account.database.user.access;

    public enum ActionType {
        LOCK, UNLOCK;
    }
  learner_created: true
- name: src/account/security/UserDetailsImpl.java
  visible: true
  text: |
    package account.security;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private String username;
        private String password;
        private List<GrantedAuthority> roles;
        private boolean access;

        public UserDetailsImpl(User user) {
            username = user.getEmail();
            password = user.getPassword();
            access = user.isAccess();
            roles = new ArrayList<>();
            user.getRoles().forEach(a -> roles.add(new SimpleGrantedAuthority("ROLE_" + a.toString())));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return roles;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return access;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/controllers/RegistrationController.java
  visible: true
  text: |
    package account.controllers;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.password.Password;
    import account.database.password.PasswordRepository;
    import account.database.user.*;
    import account.database.user.role.Role;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.apache.logging.log4j.LogBuilder;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.validation.Errors;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Date;
    import java.util.List;

    @RestController
    public class RegistrationController {
        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PasswordRepository passwordRepository;

        @Autowired
        private PasswordEncoder encoder;

        @Autowired
        private LogRepository logRepository;

        @Autowired
        private Gson gson;

        @PostMapping("/api/auth/signup")
        ResponseEntity<String> regUser(@Valid @RequestBody User user, Errors errors) {
            if (errors.hasErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());
            } else if (userRepository.existsByEmailIgnoreCase(user.getEmail())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            } else if (passwordRepository.existsByPassword(user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
            user.setEmail(user.getEmail().toLowerCase());
            user.setPassword(encoder.encode(user.getPassword()));
            if (userRepository.count() == 0) {
                user.setRoles(List.of(Role.ADMINISTRATOR));
                user.setAccess(true);
            }
            user = userRepository.save(user);
            String username = SecurityContextHolder
                    .getContext()
                    .getAuthentication()
                    .getName();
            logRepository.save(new Log.Builder()
                    .setDate(new Date())
                    .setAction(Actions.CREATE_USER)
                    .setSubject(username.contains("anonymous") ? "Anonymous" : username)
                    .setObject(user.getEmail())
                    .setPath("/api/auth/signup")
                    .build());
            return new ResponseEntity<>(user.toJson(), HttpStatus.OK);
        }

        @PostMapping("/api/auth/changepass")
        ResponseEntity<String> changePassword(Authentication auth, @Valid @RequestBody Password password, Errors errors) {
            User user = userRepository.findByEmailIgnoreCase(auth.getName());
            if (errors.hasErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        errors.getFieldError().getDefaultMessage());
            } else if (passwordRepository.existsByPassword(password.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            } else if (encoder.matches(password.getPassword(),
                            user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }
            user.setPassword(encoder.encode(password.getPassword()));
            user = userRepository.save(user);
            JsonObject object = new JsonObject();
            object.addProperty("email", user.getEmail());
            object.addProperty("status", "The password has been updated successfully");
            logRepository.save(new Log.Builder()
                    .setDate(new Date())
                    .setAction(Actions.CHANGE_PASSWORD)
                    .setSubject(auth.getName())
                    .setObject(user.getEmail())
                    .setPath("/api/auth/changepass")
                    .build());
            return new ResponseEntity<>(gson.toJson(object), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/account/database/log/Log.java
  visible: true
  text: |+
    package account.database.log;

    import com.google.gson.JsonObject;

    import javax.persistence.*;
    import java.util.Date;

    @Entity
    @Table(name = "logs")
    public class Log {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @Temporal(TemporalType.TIMESTAMP)
        @Column(name = "date")
        private Date date;

        @Enumerated(EnumType.STRING)
        @Column(name = "action")
        private Actions action;

        @Column(name = "subject")
        private String subject;

        @Column(name = "object")
        private String object;

        @Column(name = "path")
        private String path;

        public Log() {
        }

        private Log(Date date, Actions action, String subject, String object, String path) {
            this.date = date;
            this.action = action;
            this.subject = subject;
            this.object = object;
            this.path = path;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public Date getDate() {
            return date;
        }

        public void setDate(Date date) {
            this.date = date;
        }

        public Actions getAction() {
            return action;
        }

        public void setAction(Actions action) {
            this.action = action;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public JsonObject toJsonObject() {
            JsonObject object = new JsonObject();
            object.addProperty("date", date.toString());
            object.addProperty("action", action.toString());
            object.addProperty("subject", subject);
            object.addProperty("object", this.object);
            object.addProperty("path", path);
            return object;
        }

        public static class Builder {
            private Date date;
            private Actions action;
            private String subject;
            private String object;
            private String path;

            public Builder() {
            }

            public Builder setDate(Date date) {
                this.date = date;
                return this;
            }

            public Builder setAction(Actions action) {
                this.action = action;
                return this;
            }

            public Builder setSubject(String subject) {
                this.subject = subject;
                return this;
            }

            public Builder setObject(String object) {
                this.object = object;
                return this;
            }

            public Builder setPath(String path) {
                this.path = path;
                return this;
            }

            public Log build() {
                return new Log(date, action, subject, object, path);
            }

        }
    }

  learner_created: true
- name: src/account/security/UserDetailsServiceImpl.java
  visible: true
  text: |-
    package account.security;

    import account.database.log.Actions;
    import account.database.log.Log;
    import account.database.log.LogRepository;
    import account.database.user.User;
    import account.database.user.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {
        @Autowired
        UserRepository userRepo;

        @Autowired
        LogRepository logRepository;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = null;
            user = userRepo.existsByEmailIgnoreCase(username) ?
                    userRepo.findByEmailIgnoreCase(username) : null;
            if (user == null) {
                throw new UsernameNotFoundException("Not found: " + username);
            }
    //        if (logRepository.existsBySubject(user.getEmail())) {
    //            if (logRepository.findFirstBySubjectOrderByIdDesc(user.getEmail())
    //                    .getAction().equals(Actions.LOCK_USER)) {
    //                user.setAccess(true);
    //            }
    //        }
            return new UserDetailsImpl(user);
        }
    }
  learner_created: true
- name: src/account/database/user/role/Role.java
  visible: true
  text: |
    package account.database.user.role;

    public enum Role {
        ACCOUNTANT(2), ADMINISTRATOR(1), ANONYMOUS(3), USER(2), AUDITOR(2);

        private int group;

        Role(int group) {
            this.group = group;
        }

        public int getGroup() {
            return group;
        }

        public void setGroup(int group) {
            this.group = group;
        }
    }
  learner_created: true
- name: src/account/database/log/LogRepository.java
  visible: true
  text: |
    package account.database.log;

    import org.springframework.data.repository.CrudRepository;

    import java.util.List;

    public interface LogRepository extends CrudRepository<Log, Long> {
        List<Log> findFirst5BySubjectOrderByIdDesc(String subject);
        boolean existsBySubject(String subject);
        Log findFirstBySubjectOrderByIdDesc(String subject);
    }
  learner_created: true
- name: src/account/database/user/access/UserAccess.java
  visible: true
  text: |
    package account.database.user.access;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    public class UserAccess {
        @NotEmpty(message = "Username mustn't be empty")
        private String user;

        @NotEmpty
        @Pattern(regexp = "LOCK|UNLOCK", message ="Wrong operation.")
        private String operation;

        private ActionType actionType;

        public UserAccess() {
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public ActionType getActionType() {
            return actionType;
        }

        public void setActionType(ActionType actionType) {
            this.actionType = actionType;
        }

        public String getOperation() {
            return operation;
        }

        public UserAccess setOperation(String operation) {
            this.operation = operation;
            return this;
        }
    }
  learner_created: true
- name: src/resources/keystore.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16607#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 25 Apr 2022 10:13:26 UTC
record: -1
